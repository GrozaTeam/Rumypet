{
  "_from": "python-shell@^0.5.0",
  "_id": "python-shell@0.5.0",
  "_inBundle": false,
  "_integrity": "sha512-+jgmFZvwk1yMBBDisDlkXXMYv1eEJKbGCtwHLppGIyEV83cKeX9hjOjfR2yONWK3yQFhum0M2r7UE0U//hiK9w==",
  "_location": "/python-shell",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "python-shell",
    "fetchSpec": "^0.5.0",
    "name": "python-shell",
    "raw": "python-shell@^0.5.0",
    "rawSpec": "^0.5.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/python-shell/-/python-shell-0.5.0.tgz",
  "_shasum": "461983bafd092010bc2760c365b13e7d50aab231",
  "_shrinkwrap": null,
  "_spec": "python-shell@^0.5.0",
  "_where": "/Users/paeng/dev/tp/groza/Rumypet/server",
  "author": {
    "email": "nicolas@extrabacon.net",
    "name": "Nicolas Mercier"
  },
  "bugs": {
    "url": "http://github.com/extrabacon/python-shell/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Run Python scripts from Node.js with simple (but efficient) inter-process communication through stdio",
  "devDependencies": {
    "mocha": "^2.2.5",
    "should": "^6.0.0"
  },
  "engines": {
    "node": ">=0.10"
  },
  "homepage": "http://github.com/extrabacon/python-shell",
  "keywords": [
    "python"
  ],
  "license": "MIT",
  "name": "python-shell",
  "optionalDependencies": {},
  "readme": "# python-shell\r\n\r\nA simple way to run Python scripts from Node.js with basic but efficient inter-process communication and better error handling.\r\n\r\n## Features\r\n\r\n+ Reliably spawn Python scripts in a child process\r\n+ Built-in text, JSON and binary modes\r\n+ Custom parsers and formatters\r\n+ Simple and efficient data transfers through stdin and stdout streams\r\n+ Extended stack traces when an error is thrown\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install python-shell\r\n```\r\n\r\nTo run the tests:\r\n```bash\r\nnpm test\r\n```\r\n\r\n## Documentation\r\n\r\n### Running a Python script:\r\n\r\n```js\r\nvar PythonShell = require('python-shell');\r\n\r\nPythonShell.run('my_script.py', function (err) {\r\n  if (err) throw err;\r\n  console.log('finished');\r\n});\r\n```\r\n\r\nIf the script writes to stderr or exits with a non-zero code, an error will be thrown.\r\n\r\n### Running a Python script with arguments and options:\r\n\r\n```js\r\nvar PythonShell = require('python-shell');\r\n\r\nvar options = {\r\n  mode: 'text',\r\n  pythonPath: 'path/to/python',\r\n  pythonOptions: ['-u'],\r\n  scriptPath: 'path/to/my/scripts',\r\n  args: ['value1', 'value2', 'value3']\r\n};\r\n\r\nPythonShell.run('my_script.py', options, function (err, results) {\r\n  if (err) throw err;\r\n  // results is an array consisting of messages collected during execution\r\n  console.log('results: %j', results);\r\n});\r\n```\r\n\r\n### Exchanging data between Node and Python:\r\n\r\n```js\r\nvar PythonShell = require('python-shell');\r\nvar pyshell = new PythonShell('my_script.py');\r\n\r\n// sends a message to the Python script via stdin\r\npyshell.send('hello');\r\n\r\npyshell.on('message', function (message) {\r\n  // received a message sent from the Python script (a simple \"print\" statement)\r\n  console.log(message);\r\n});\r\n\r\n// end the input stream and allow the process to exit\r\npyshell.end(function (err,code,signal) {\r\n  if (err) throw err;\r\n  console.log('The exit code was: ' + code);\r\n  console.log('The exit signal was: ' + signal);\r\n  console.log('finished');\r\n  console.log('finished');\r\n});\r\n```\r\n\r\nUse `.send(message)` to send a message to the Python script. Attach the `message` event to listen to messages emitted from the Python script.\r\n\r\nUse `options.mode` to quickly setup how data is sent and received between your Node and Python applications.\r\n\r\n  * use `text` mode for exchanging lines of text\r\n  * use `json` mode for exchanging JSON fragments\r\n  * use `binary` mode for anything else (data is sent and received as-is)\r\n\r\nFor more details and examples including Python source code, take a look at the tests.\r\n\r\n### Error Handling and extended stack traces\r\n\r\nAn error will be thrown if the process exits with a non-zero exit code or if data has been written to stderr. Additionally, if \"stderr\" contains a formatted Python traceback, the error is augmented with Python exception details including a concatenated stack trace.\r\n\r\nSample error with traceback (from test/python/error.py):\r\n```\r\nTraceback (most recent call last):\r\n  File \"test/python/error.py\", line 6, in <module>\r\n    divide_by_zero()\r\n  File \"test/python/error.py\", line 4, in divide_by_zero\r\n    print 1/0\r\nZeroDivisionError: integer division or modulo by zero\r\n```\r\nwould result into the following error:\r\n```js\r\n{ [Error: ZeroDivisionError: integer division or modulo by zero]\r\n  traceback: 'Traceback (most recent call last):\\n  File \"test/python/error.py\", line 6, in <module>\\n    divide_by_zero()\\n  File \"test/python/error.py\", line 4, in divide_by_zero\\n    print 1/0\\nZeroDivisionError: integer division or modulo by zero\\n',\r\n  executable: 'python',\r\n  options: null,\r\n  script: 'test/python/error.py',\r\n  args: null,\r\n  exitCode: 1 }\r\n```\r\nand `err.stack` would look like this:\r\n```\r\nError: ZeroDivisionError: integer division or modulo by zero\r\n    at PythonShell.parseError (python-shell/index.js:131:17)\r\n    at ChildProcess.<anonymous> (python-shell/index.js:67:28)\r\n    at ChildProcess.EventEmitter.emit (events.js:98:17)\r\n    at Process.ChildProcess._handle.onexit (child_process.js:797:12)\r\n    ----- Python Traceback -----\r\n    File \"test/python/error.py\", line 6, in <module>\r\n      divide_by_zero()\r\n    File \"test/python/error.py\", line 4, in divide_by_zero\r\n      print 1/0\r\n```\r\n\r\n## API Reference\r\n\r\n#### `PythonShell(script, options)` constructor\r\n\r\nCreates an instance of `PythonShell` and starts the Python process\r\n\r\n* `script`: the path of the script to execute\r\n* `options`: the execution options, consisting of:\r\n  * `mode`: Configures how data is exchanged when data flows through stdin and stdout. The possible values are:\r\n    * `text`: each line of data (ending with \"\\n\") is emitted as a message (default)\r\n    * `json`: each line of data (ending with \"\\n\") is parsed as JSON and emitted as a message\r\n    * `binary`: data is streamed as-is through `stdout` and `stdin`\r\n  * `formatter`: each message to send is transformed using this method, then appended with \"\\n\"\r\n  * `parser`: each line of data (ending with \"\\n\") is parsed with this function and its result is emitted as a message\r\n  * `encoding`: the text encoding to apply on the child process streams (default: \"utf8\")\r\n  * `pythonPath`: The path where to locate the \"python\" executable. Default: \"python\"\r\n  * `pythonOptions`: Array of option switches to pass to \"python\"\r\n  * `scriptPath`: The default path where to look for scripts. Default is the current working directory.\r\n  * `args`: Array of arguments to pass to the script\r\n\r\nOther options are forwarded to `child_process.spawn`.\r\n\r\nPythonShell instances have the following properties:\r\n* `script`: the path of the script to execute\r\n* `command`: the full command arguments passed to the Python executable\r\n* `stdin`: the Python stdin stream, used to send data to the child process\r\n* `stdout`: the Python stdout stream, used for receiving data from the child process\r\n* `stderr`: the Python stderr stream, used for communicating errors\r\n* `childProcess`: the process instance created via `child_process.spawn`\r\n* `terminated`: boolean indicating whether the process has exited\r\n* `exitCode`: the process exit code, available after the process has ended\r\n\r\nExample:\r\n```js\r\n// create a new instance\r\nvar shell = new PythonShell('script.py', options);\r\n```\r\n\r\n#### `#defaultOptions`\r\n\r\nConfigures default options for all new instances of PythonShell.\r\n\r\nExample:\r\n```js\r\n// setup a default \"scriptPath\"\r\nPythonShell.defaultOptions = { scriptPath: '../scripts' };\r\n```\r\n\r\n#### `#run(script, options, callback)`\r\n\r\nRuns the Python script and invokes `callback` with the results. The callback contains the execution error (if any) as well as an array of messages emitted from the Python script.\r\n\r\nThis method is also returning the `PythonShell` instance.\r\n\r\nExample:\r\n```js\r\n// run a simple script\r\nPythonShell.run('script.py', function (err, results) {\r\n  // script finished\r\n});\r\n```\r\n\r\n#### `.send(message)`\r\n\r\nSends a message to the Python script via stdin. The data is formatted according to the selected mode (text or JSON), or through a custom function when `formatter` is specified.\r\n\r\nExample:\r\n```js\r\n// send a message in text mode\r\nvar shell = new PythonShell('script.py', { mode: 'text '});\r\nshell.send('hello world!');\r\n\r\n// send a message in JSON mode\r\nvar shell = new PythonShell('script.py', { mode: 'json '});\r\nshell.send({ command: \"do_stuff\", args: [1, 2, 3] });\r\n```\r\n\r\n#### `.receive(data)`\r\n\r\nParses incoming data from the Python script written via stdout and emits `message` events. This method is called automatically as data is being received from stdout.\r\n\r\n#### `.end(callback)`\r\n\r\nCloses the stdin stream, allowing the Python script to finish and exit. The optional callback is invoked when the process is terminated.\r\n\r\n#### `.terminate(signal)`\r\n\r\nTerminates the python script, the optional end callback is invoked if specified. A kill signal may be provided by `signal`, if `signal` is not specified SIGTERM is sent.\r\n\r\n#### event: `message`\r\n\r\nFires when a chunk of data is parsed from the stdout stream via the `receive` method. If a `parser` method is specified, the result of this function will be the message value. This event is not emitted in binary mode.\r\n\r\nExample:\r\n```js\r\n// receive a message in text mode\r\nvar shell = new PythonShell('script.py', { mode: 'text '});\r\nshell.on('message', function (message) {\r\n  // handle message (a line of text from stdout)\r\n});\r\n\r\n// receive a message in JSON mode\r\nvar shell = new PythonShell('script.py', { mode: 'json '});\r\nshell.on('message', function (message) {\r\n  // handle message (a line of text from stdout, parsed as JSON)\r\n});\r\n```\r\n\r\n#### event: `close`\r\n\r\nFires when the process has been terminated, with an error or not.\r\n\r\n#### event: `error`\r\n\r\nFires when the process terminates with a non-zero exit code, or if data is written to the stderr stream.\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Nicolas Mercier\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/extrabacon/python-shell.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "0.5.0"
}
